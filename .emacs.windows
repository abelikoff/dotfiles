;;; Emacs startup

;;; paths

(defun my-filter (condp lst)
  "Filter list elements not matching the predicate."
  (delq nil
        (mapcar (lambda (x) (and (funcall condp x) x)) lst)))

(setq load-path (append
                 (my-filter 'file-directory-p
                            (mapcar #'expand-file-name
                                    '("C:\\tools\\elisp"
				      "C:\\tools\\elisp\\color-theme-6.6.0"
				      "~/lib/elisp"
                                      "~/lib/elisp/color-theme"
                                      "~/Documents/lib/elisp"
                                      "~/Documents/lib/elisp/color-theme"
                                      "/opt/local/emacs/"
                                      )))
                 load-path))



;;; general packages

;;(load "crypt++" t t t)
(autoload 'crypt "crypt++" "Load crypt++" t)


;;; X11 setup

(defconst is-big-machine
  (or (string-match "\\(aix\\|solaris\\)" system-configuration)
      (file-exists-p "/etc/redhat-release"))
  "Non-nil when running on a big (SUN, IBM, HP) machine.")

(defconst is-windows
  (if (string-match "mingw-nt" system-configuration) t nil)
  "Non-nil when running on Windows.")

(defconst is-macintosh
  (if (string-match "apple-darwin" system-configuration) t nil)
  "Non-nil when running on a Mac.")

(defconst my-default-font
  (cond (is-big-machine "-xos4-terminus-medium-r-normal--14-140-*-*-*-*-*-*")
        (is-windows "Consolas-10")
        (is-macintosh "Monaco-12")
        (t "DejaVu Sans Mono-10")))

;;      (font . "-dec-terminal-medium-r-normal-*-*-140-*-*-c-*-iso8859-1")


(defconst my-default-height
  (if is-big-machine 60 50))

(defconst my-default-bg-color "Gray20")
(defconst my-default-fg-color "Ghost White")

(setq default-frame-alist
      `((width . 80)
        (height . ,my-default-height)
;        (menu-bar-lines . 0)
        (tool-bar-lines . 0)
        (vertical-scroll-bars . nil)
        (font . ,my-default-font)
        (foreground-color . ,my-default-fg-color)))

(tool-bar-mode -1)


;; Emacs on *stupid* AIX and Solaris boxes doesn't handle 'background-color'
;; frame attribute properly

(if is-big-machine
    (set-background-color my-default-bg-color)
  (add-to-list 'default-frame-alist `(background-color . my-default-bg-color)))

;; (set-background-color "rgbi:.325/.91/.52")   ;; Harvey's colors


;;; Font-lock configuration

(require 'font-lock)
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)


;;; color-theme

(require 'color-theme)

(defun color-theme-darkgraymild ()
  "Mild dark gray color theme based on desert and blazer."
  (interactive)
  (color-theme-install
   '(color-theme-darkgraymild
     ((background-color . "gray20")
      (background-mode . dark)
      (background-toolbar-color . "gray60")
      (border-color . "gray10")
      (bottom-toolbar-shadow-color . "#909099999999")
      (cursor-color . "Red3")
      (foreground-color . "ghost white")
      (top-toolbar-shadow-color . "Yellow"))
    (default ((t (nil))))
;;    (border-glyph ((t (nil))))
    (calendar-today-face ((t (:underline t))))
    (cperl-array-face  ((t (nil))))
    (cperl-hash-face  ((t (nil))))
    (cperl-nonoverridable-face ((t (:bold t :foreground "Khaki"))))
    (diary-face ((t (:foreground "red"))))
    (ff-paths-non-existant-file-face ((t (:bold t :foreground "NavyBlue"))))
    (font-lock-builtin-face ((t (:bold t :foreground "Khaki"))))
    (font-lock-comment-face ((t (:foreground "LightSeaGreen"))))
    (font-lock-comment-delimiter-face ((t (:foreground "LightSeaGreen"))))
    (font-lock-constant-face  ((t (nil))))
    (font-lock-doc-face ((t (:foreground "DarkGoldenrod"))))
    (font-lock-doc-string-face ((t (:foreground "DarkGoldenrod"))))
    (font-lock-function-name-face ((t (:bold t :foreground "Magenta"))))
    (font-lock-keyword-face ((t (:bold t :foreground "Khaki"))))
    (font-lock-preprocessor-face ((t (:foreground "Green"))))
    (font-lock-reference-face ((t (:foreground "red3"))))
    (font-lock-special-comment-face ((t (:foreground "blue4"))))
    (font-lock-special-keyword-face ((t (:foreground "red4"))))
    (font-lock-string-face ((t (:foreground "DarkGoldenrod"))))
    (font-lock-type-face ((t (nil))))
    (font-lock-variable-name-face  ((t (nil))))
    (font-lock-warning-face ((t (:bold t :background "Red" :foreground "White"))))
    (comint-highlight-prompt ((t (:bold t :foreground "Magenta"))))
    (comint-highlight-input ((t (:bold t :foreground "Yellow"))))
    (gui-button-face ((t (:background "grey75" :foreground "black"))))
    (gui-element ((t (:background "azure1" :foreground "Black"))))
    (highlight ((t (:background "darkseagreen2" :foreground "blue"))))
    (holiday-face ((t (:background "pink" :foreground "black"))))
    (info-node ((t (:bold t :foreground "Yellow"))))
    (info-xref ((t (:bold t :foreground "Yellow"))))
    (isearch ((t (:background "Blue" :foreground "Yellow"))))
    (left-margin ((t (nil))))
    (list-mode-item-selected ((t (:background "gray68" :foreground "black"))))
    (linum ((t (:foreground "DarkGoldenrod"))))
    (minibuffer-prompt ((t (:bold t :foreground "Khaki"))))
    (mode-line ((t (:background "Gray60" :foreground "Black"))))
    (mode-line-buffer-id ((t (:bold t :background "Gray60" :foreground "MediumBlue"))))
    (modeline-mousable ((t (:background "bisque2" :foreground "firebrick"))))
    (modeline-mousable-minor-mode ((t (:background "bisque2" :foreground "green4"))))
    (paren-blink-off ((t (:foreground "azure1"))))
    (paren-face ((t (:background "lightgoldenrod"))))
    (paren-match ((t (:background "bisque2"))))
    (paren-mismatch ((t (:background "DeepPink" :foreground "black"))))
    (paren-mismatch-face ((t (:background "DeepPink"))))
    (paren-no-match-face ((t (:background "yellow"))))
    (pointer ((t (:background "white" :foreground "blue"))))
    (primary-selection ((t (:background "gray65"))))
    (secondary-selection ((t (:background "Khaki" :foreground "Black"))))
    ;;(right-margin ((t (nil))))
    (right-margin ((t (:foreground "Green"))))
    (secondary-selection ((t (:background "paleturquoise"))))
    (shell-option-face ((t (:foreground "gray50"))))
    (shell-output-2-face ((t (:foreground "green4"))))
    (shell-output-3-face ((t (:foreground "green4"))))
    (shell-output-face ((t (:bold t))))
    (shell-prompt-face ((t (:foreground "blue3"))))
    (speedbar-button-face ((t (:foreground "green4"))))
    (speedbar-directory-face ((t (:foreground "blue4"))))
    (speedbar-file-face ((t (:foreground "cyan4"))))
    (speedbar-highlight-face ((t (:background "green"))))
    (speedbar-selected-face ((t (:underline t :foreground "red"))))
    (speedbar-tag-face ((t (:foreground "brown"))))
    (text-cursor ((t (:background "Red3" :foreground "bisque"))))
    (toolbar ((t (:background "Gray80"))))
    (underline ((t (:underline t))))
    (vertical-divider ((t (nil))))
    (zmacs-region ((t (:background "steelblue" :foreground "yellow")))))))

(color-theme-darkgraymild)


;;
;; global settings
;;

(line-number-mode 1)
(column-number-mode 1)
(global-set-key "\r" 'reindent-then-newline-and-indent)

(let ((dir (expand-file-name (concat (getenv "TEMP") "/emacs-backup/"))))
  (if (file-exists-p dir)
      (setq backup-directory-alist `((".*" . ,dir)))))

(setq-default inhibit-startup-message t
              initial-scratch-message nil
              default-major-mode 'indented-text-mode
              next-line-add-newlines nil
              require-final-newline nil
              modeline-click-swaps-buffers t
              indent-tabs-mode nil
              printer-name "//nycs01vfp/06SCopier"
              frame-title-format '("" "%b - Emacs " emacs-version)
              )

(put 'eval-expression 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(toggle-save-place-globally)

(global-set-key [f8] 'next-error)
(global-set-key [S-f8] 'previous-error)


;;; ANTLR mode

(autoload 'antlr-mode "antlr-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.g$" . antlr-mode))


;;; C mode

(setq-default c-default-style "c#")
(setq-default c-style-variables-are-local-p nil)
(setq-default c-basic-offset 4)

(add-hook 'c-mode-common-hook
          (lambda ()
            (require 'imenu)
            (setq-default c-basic-offset 4)
            (imenu-add-to-menubar "Functions")
            (font-lock-add-keywords
             nil
             '(("\\<\\(FIXME:.*\\)" 1 font-lock-warning-face t)))))

;(add-hook 'c-mode-common-hook 'untabify-buffer)


;;; C# mode

(autoload 'csharp-mode "csharp-mode" "Major mode for editing C# code." t)
(add-to-list 'auto-mode-alist '("\\.cs$" . csharp-mode))
(add-hook 'csharp-mode-hook 'untabify-buffer)


;;; CPerl mode

(mapc
 (lambda (pair)
   (if (eq (cdr pair) 'perl-mode)
       (setcdr pair 'cperl-mode)))
 (append auto-mode-alist interpreter-mode-alist))

(add-hook 'cperl-mode-hook
          (lambda ()
            (local-set-key [f1] 'cperl-perldoc-at-point)
            (font-lock-add-keywords
             nil
             '(("\\<\\(FIXME:.*\\)" 1 font-lock-warning-face t)))))

;(add-hook 'cperl-mode-hook 'untabify-buffer)

(setq cperl-indent-level 4)
(setq cperl-continued-statement-offset 4)
(setq cperl-brace-offset 0)
(setq cperl-label-offset -4)


;;; Diary/Appt

(setq diary-file "~/.diary")

(add-hook 'diary-hook 'appt-make-list)
(add-hook 'diary-display-hook 'fancy-diary-display)
;;(setq-default display-time-format "[%H:%M]")
;;(display-time)


;;; DOS batch

(autoload 'dos-mode "dos" "Edit MS-DOS scripts." t)
(add-to-list 'auto-mode-alist '("\\.bat$" . dos-mode))


;;; ESS

;;(setq-default ess-continued-statement-offset 4)
;;(setq-default ess-indent-level 4)

(add-hook 'ess-mode-hook
          (lambda ()
            (setq ess-indent-level 4)
            (font-lock-add-keywords
             nil
             '(("\\<\\(FIXME:.*\\)" 1 font-lock-warning-face t)))))

;(add-hook 'ess-mode-hook 'untabify-buffer)


;;; GDB

;;(require "'speedbar")
;;(setq gdb-many-windows t)


;;; imenu

;;;(require 'imenu)


;;; indentation

;; (cond ((load "filladapt" t t t)
;;        (setq-default filladapt-mode t)
;;        (setq sentence-end-double-space nil)
       
;;        (push '("\\(>\\| \\|:\\||\\)+?" citation->) filladapt-token-table)
;;        (setq-default adaptive-fill-mode nil)
;;        (setq-default filladapt-mode t)
;;        (setq-default filladapt-mode-line-string nil)
       
;;        (setq sentence-end-double-space nil
;;              sentence-end "[.?!][]\"')}]*\\($\\| $\\|   \\| \\)[        \n]*")
;;        ))


;;; man/woman

(autoload 'woman "woman" "Load woman" t)
(global-set-key [f1] 'man-word)


;;; org-mode

(let ((dir "~/lib/elisp/org-mode/lisp"))
  (cond ((file-exists-p (concat dir "/org-install.el"))
         (add-to-list 'load-path (expand-file-name dir))
         (require 'org-install)
         (eval-after-load 'info
           '(add-to-list 'Info-directory-list 
                         (concat dir "/../info"))))))

(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)

(setq org-todo-keyword-faces
      '(("TODO"  . (:foreground "Yellow" :weight bold))))




;;; parenthesis matching

(require 'paren)
(setq show-paren-style 'mixed)
(show-paren-mode 1)

(set-face-foreground 'show-paren-mismatch-face "White")
(set-face-background 'show-paren-mismatch-face "Red")
(set-face-background 'show-paren-match-face "Blue")

;;(paren-set-mode 'blink-paren)


;; protobuf

(autoload 'protobuf-mode "protobuf-mode"
  "Major mode for editing Google Protobuf code." t)
(add-to-list 'auto-mode-alist '("\\.proto$" . protobuf-mode))


;; load tags

(defun load-bbsrc-tags ()
  (interactive "")

  (let ((pfx "/bbsrc/tools/tags/")
        (libs '("acclib" "appscrn" "apptwoline" "apputil" "calclib" "datelib"
                "dbutil" "derscrn" "derutil" "mathutil" "msgutil" "mtgescrn"
                "mtgeutil" "peutil" "rptutil" "volderlib")))
    (setq tags-table-list 
          (append tags-table-list
                  (mapcar (lambda (e) (concat pfx e)) libs)))))

;; (let* ((tag-dir "/zzz/bbsrc/tools/tags"))
;;   (if (file-directory-p tag-dir)
;;       (setq tags-table-list 
;;          (remove-if (lambda (x)
;;                       (or (not (file-directory-p x))
;;                           (string-match "\\.\\.*$" x)))
;;                     (directory-files tag-dir t))))))



;;; Version control

(setq diff-switches "-uw")
;;(add-to-list 'vc-handled-backends 'SVN)


;;; Cyrillic support

;(require 'russian)
;(require 'rusup)

;;(global-set-key [f7] 'russify-region)
;; Control-F7
;;(global-set-key (if emacs-is-xemacs [(control f7)] [C-f7]) 'russify-line)
;; Shift-F7
;;(global-set-key (if emacs-is-xemacs [(shift f5)] [S-f17]) 'russify-word)
;;(global-set-key [f8] 'russian-insertion-mode)


;;; Mailcrypt

;(load-library "mailcrypt")
;(mc-setversion "gpg")


;;; Matlab

(autoload 'matlab-mode "matlab" "Enter Matlab mode." t)
(setq auto-mode-alist (cons '("\\.m\\'" . matlab-mode) auto-mode-alist))
(autoload 'matlab-shell "matlab" "Interactive Matlab mode." t)
(setq-default matlab-shell-command "octave_wrapper")
(setq octave-comment-char ?%)


;;; PHP mode

(autoload 'php-mode "php-mode" "PHP Mode" t)


;;; Print setup
 
;; (setq lpr-switches '("-Pduplex"))


;;; Voctest

(autoload 'voctest "voctest"
  "Vocabulary testing program" t)


;;; Webster dictionary

(autoload 'webster-lookup "webdic"
  "Webster Dictionary lookup" t)

(autoload 'webster-lookup-under-cursor "webdic"
  "Webster Dictionary lookup for the word at the point" t)

(global-set-key [S-f11] 'webster-lookup-under-cursor)


;;; word-help

(autoload 'set-help-file "word-help"
  "Sets the set of Texinfo files used for `word-help' to HELPFILE." t nil)
(autoload 'word-help "word-help"
  "Find documentation on the KEYWORD under the cursor (or passed)." t nil)
(autoload 'word-help-complete "word-help"
  "Perform completion on the symbol preceding the point." t nil)
(autoload 'word-help-add-keywords "word-help"
  "Add user keywords to a certain Info file." nil nil)

(define-key help-map [?\C-i] 'word-help)
;;(global-set-key [\C-tab] 'word-help-complete)


;; Compilation setup

(global-set-key "\C-c\C-m" 'compile)
(global-set-key "\C-cm" 'compile)

;;(require 'compile)
;; (setq compilation-error-regexp-alist
;;       (append
;;        (list
;;      '("\\(\n\\|on \\|before \\|after \\)[Ll]ine[ \t]+\\([0-9]+\\)[ \t]+\
;; of[ \t]+\"?\\([^\":\n]+\\)\"?:" 3 2)
;;      '("\n\\([^, \n]+\\), line \\([0-9]+\\)[^:]*: \\(Warning:\\|Note:\\|Error:\\)" 1 2))
;;        compilation-error-regexp-alist))


(defun todo-list ()
  "Show all occurences of FIXME and TODO tags in the current source tree."

  (interactive "")
  (let ((null-device nil))
    (grep "find . -type f | cut -c 3- | egrep -v '(~|\.o)$' | egrep -v '(^CVS/|/CVS/|^\.svn/|/\.svn/| )' | xargs egrep -n '(FIXME|TODO):' | egrep -v '^Binary file .* matches'")))


;; Lisp mode setup

; (add-hook 'ilisp-load-hook
;   '(lambda ()
;      (define-key global-map "\C-c1" 'ilisp-bury-output)
;      (define-key global-map "\C-cv" 'ilisp-scroll-output)
;      (define-key global-map "\C-cg" 'ilisp-grow-output)))


(autoload 'run-ilisp   "ilisp" "Select a new inferior Lisp." t)
(autoload 'common-lisp "ilisp" "Inferior generic Common Lisp." t)
(autoload 'clisp-hs    "ilisp" "Inferior CLISP Common Lisp." t)
(autoload 'scheme      "ilisp" "Inferior generic Scheme." t)
(autoload 'guile       "ilisp" "Inferior GUILE Scheme." t)

(setq clisp-hs-program "clisp -I")
(setq guile-program "guile")

(set-default 'auto-mode-alist
             (append '(("\\.lisp$" . lisp-mode)
                       ("\\.lsp$" . lisp-mode)
                       ("\\.cl$" . lisp-mode))
                     auto-mode-alist))

(setq lisp-mode-hook 
      (lambda () 
        (require 'imenu)
        (require 'ilisp)
        (imenu-add-to-menubar "Functions")
        (font-lock-add-keywords
         nil
         '(("\\<\\(FIXME:.*\\)" 1 font-lock-warning-face t)))))


(setq emacs-lisp-mode-hook 
      (lambda () 
        (require 'imenu)
        (imenu-add-to-menubar "Functions")
        (local-set-key [f1] 'describe-function)
        (local-set-key [S-f1] 'describe-variable)
        (font-lock-add-keywords
         nil
         '(("\\<\\(FIXME:.*\\)" 1 font-lock-warning-face t)))))


(setq ilisp-*use-fsf-compliant-keybindings* t)

(set-default 'auto-mode-alist
             (append '(("\\.scm$" . scheme-mode)
                       ("\\.ss$" . scheme-mode)
                       ("\\.stk$" . scheme-mode)
                       ("\\.stklos$" . scheme-mode))
                     auto-mode-alist))

(setq scheme-mode-hook '(lambda () (require 'ilisp)))


;; (add-hook 'ilisp-load-hook
;;           '(lambda ()
;;              ;; Change default key prefix to C-c
;;              (setq ilisp-*prefix* "\C-c")

;;              ;; Set a keybinding for the COMMON-LISP-HYPERSPEC command
;;              (defkey-ilisp "" 'common-lisp-hyperspec)

;;              ;; Make sure that you don't keep popping up the 'inferior
;;              ;; Lisp' buffer window when this is already visible in
;;              ;; another frame. Actually this variable has more impact
;;              ;; than that. Watch out.
;;              ; (setq pop-up-frames t)

;;              (message "Running ilisp-load-hook")
;;              ;; Define LispMachine-like key bindings, too.
;;              ; (ilisp-lispm-bindings) Sample initialization hook.

;;              ;; Set the inferior Lisp directory to the directory of
;;              ;; the buffer that spawned it on the first prompt.
;;              (add-hook 'ilisp-init-hook
;;                        '(lambda ()
;;                           (default-directory-lisp ilisp-last-buffer)))
;;              ))


; (setq inferior-lisp-program "lisp")
; (define-key lisp-interaction-mode-map "\C-cd" 'lisp-send-defun)
; (define-key lisp-interaction-mode-map "\C-cj" 'lisp-send-defun-and-go)

; (defun my-lisp-family-setup ()
;   (local-set-key [f1]   'clman-word)
;   (local-set-key "\C-cd" 'lisp-send-defun)
;   (local-set-key "\C-cj" 'lisp-send-defun-and-go))


; (add-hook 'lisp-mode-hook #'my-lisp-family-setup)
; (add-hook 'inferior-lisp-mode-hook #'my-lisp-family-setup)

; (add-hook 'emacs-lisp-mode-hook
;         (function (lambda ()
; ;;                  (local-set-key [f8] 'eval-and-advance)
;                     )))


;; HyperSpec

(setq common-lisp-hyperspec-root
      "file:/usr/local/doc/HyperSpec/")
(setq common-lisp-hyperspec-symbol-table
      "/usr/local/doc/HyperSpec/Data/Map_Sym.txt")


;; CLtL2

(setq cltl2-root-url "file:/usr/local/doc/cltl2/")


;; Scheme mode

(setq scheme-program-name "scsh")

(setq cmuscheme-load-hook
      '((lambda () (define-key inferior-scheme-mode-map "\C-c\C-t"
                     'favorite-cmd))))


;; TeX/LaTeX

(autoload 'auctex "auxtex" "Load AucTeX" t)
(autoload 'auctex "preview-latex.el" "Load AucTeX" t)
;;(load "auctex.el" t t t)
;;(load "preview-latex.el" t t t)

;(eval-after-load 'info
;  '(add-to-list 'Info-directory-list "~/lib/elisp/auctex"))


(defun insert-latex-env-abbrev ()
  (let ((oldp (point)))
    (previous-line 3)
    (indent-region (point) oldp nil))
  (indent-according-to-mode)
  (next-line 1)
  (indent-according-to-mode))


(add-hook 'LaTeX-mode-hook
          (lambda ()
            (push `("^pdf$" "." "acroread %o") TeX-output-view-style)
            (turn-on-auto-fill)
            (setq abbrev-mode t)

            ;; abbreviations

            (define-abbrev text-mode-abbrev-table "\\a" "\\alpha" nil)
            (define-abbrev text-mode-abbrev-table "gga" "\\alpha" nil)
            (define-abbrev text-mode-abbrev-table "ggb" "\\beta" nil)
            (define-abbrev text-mode-abbrev-table "ggg" "\\gamma" nil)
            (define-abbrev text-mode-abbrev-table "ggd" "\\delta" nil)
            (define-abbrev text-mode-abbrev-table "ggf" "\\phi" nil)
            (define-abbrev text-mode-abbrev-table "ggr" "\\rho" nil)
            (define-abbrev text-mode-abbrev-table "ggs" "\\sigma" nil)
            
            (mapcar
             (lambda (e)
               (define-abbrev text-mode-abbrev-table (car e) 
                 (format "\\begin{%s}\n\n\\end{%s}\n" (cdr e) (cdr e))
                 '(lambda ()
                    (insert-latex-env-abbrev))))
             '(("eal" . "align*")
               ("ega" . "gather*")
               ("ee" . "")
               ("eeq" . "equation")
               ("een" . "enumerate")
               ("eev" . "verbatim")
               ("eit" . "itemize")
               ))

            (font-lock-add-keywords
             nil
             '(("\\<\\(FIXME:.*\\)" 1 font-lock-warning-face t)
               ("\\<\\(fixme *.*\\)" 1 font-lock-warning-face t)))))

(setq
    TeX-pdf-mode  t                     ; generate PDF
)


;; shell script mode

(add-hook 'sh-mode-hook
          (lambda ()
            (font-lock-add-keywords
             nil
             '(("\\<\\(FIXME:.*\\)" 1 font-lock-warning-face t)))))

;(add-hook 'sh-mode-hook 'untabify-buffer)


;; Browse URL

(setq browse-url-browser-function #'browse-url-gnome-moz)


;; find file at point

;; (require 'ffap)
;; (ffap-bindings)

;; (setq ffap-require-prefix t
;;       ffap-c-path (append '("/usr/include")
;;                        ))
;                         (mapcar (lambda (s) (concat
;                                              "/home/aaron/app/var/src/"
;                                              s))
;                                 '("block-data" "containers" "cov-method" "db"
;                                   "dg1-tsk" "drivers" "foreign"
;                                   "global-headers" "makefiles" "mapping"
;                                   "primitives" "slatec" "structures"
;                                   "util"))))




;; Emacs server

;(server-start))


(global-set-key [f3] 'shell-other-window)
(global-set-key "\C-cg" 'goto-line)

(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'mail-mode-hook 'turn-on-auto-fill)
(add-hook 'message-mode-hook 'turn-on-auto-fill)
;(add-hook 'text-mode-hook 'turn-on-filladapt-mode)
;(add-hook 'mail-mode-hook 'turn-on-filladapt-mode)
;(add-hook 'tex-mode-hook 'turn-on-filladapt-mode)
;(add-hook 'latex-mode-hook 'turn-on-filladapt-mode)

(add-hook 'forms-mode-hooks
          (function (lambda ()
                      (local-set-key [S-right] 'forms-next-field)
                      (local-set-key [S-left] 'forms-next-field))))

;; redefine indent-for-comment to kill the comment with negative prefix

(defadvice indent-for-comment (around kill-comment activate)
  "Kill the comment with negative prefix."
  (if (eq current-prefix-arg '-)
      (kill-comment nil)
    ad-do-it))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Useful Routines
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; auto-startup stuff

(defun auto-startup ()
  "Convenience function to be called by the first emacs, which is brought
up automatically"
  
  (interactive)
;;  (run-at-time 20 nil 'get-daily-comic "dilbert")
  (diary)
  (gnus-other-frame)
  )


(defun eval-and-advance ()
  "Evaluate next sexp and advance"
  (interactive "*")
  (forward-sexp)
  (eval-last-sexp nil))


(defun run-stk ()
  "Run STk as an inferior Scheme"

  (interactive "*")
  (run-scheme "stk"))


(defun run-xlispstat ()
  "Run XLISP-STAT as an inferior Scheme"

  (interactive "*")
  (run-lisp "xlispstat"))


(defun service-window ()
  "Split screen by two subwindows. Useful for shell, LISP, GDB"

  (interactive)
  (delete-other-windows)
  (split-window)
  (enlarge-window 5)
  (other-window 1))


(defun shell-other-window ()
  "Create a service window and start shell in it"

  (interactive "*")
  (service-window)
  (shell))


(defun man-word ()
  "Show the word under the cursor as man page."

  (interactive)
  (save-excursion
    (let ((beg-word (progn
                      (forward-word -1)
                      (point))))
      (forward-word 1)
      (funcall #'man (buffer-substring beg-word (point))))))


(defun gdb-step-forever (arg)
  "gdb animation"
  (interactive "Time between steps: ")
  (while t
    (progn
      (sit-for arg)
      (gud-step 1))))


(defun voctest-reverse ()
  "Run voctest with reversed test direction"

  (interactive "")
  (let ((voctest-test-direction '(1 . 0)))
    (voctest)))


(defun untabify-buffer ()
  (add-hook 'before-save-hook
            (lambda ()
              (untabify (point-min) (point-max)))))


;; startup

(if (file-exists-p "~/.diary")
    (diary))



;; STUPID Solaris/AIX keep losing bg/fg settings unless default-frame-alist
;; is re-initialized

(if (and window-system is-big-machine)
    (setq default-frame-alist
          `((width . 80)
            (height . ,my-default-height)
            (menu-bar-lines . 0)
            (tool-bar-lines . 0)
            (vertical-scroll-bars . nil)
            (font . ,my-default-font)
            (foreground-color . ,my-default-fg-color)
            )))


;;; Local Variables:
;;;   mode: outline-minor
;;; End:
